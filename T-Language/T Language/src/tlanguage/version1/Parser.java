
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 28 01:07:17 GMT-03:00 2009
//----------------------------------------------------

package tlanguage.version1;

import tlanguage.Token;
import tlanguage.version1.tree.*;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 28 01:07:17 GMT-03:00 2009
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\002\000\002\006\002\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\011\004\000\002\011\002\000\002\012\007\000\002\012" +
    "\011\000\002\012\007\000\002\012\005\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\007\000\002\013\004\000\002" +
    "\013\002\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\004\000\002\016\003" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\004\006\010\ufffe\001\002\000\004\010" +
    "\ufffb\001\002\000\004\002\015\001\002\000\004\026\007" +
    "\001\002\000\004\024\011\001\002\000\004\027\014\001" +
    "\002\000\004\032\012\001\002\000\004\024\013\001\002" +
    "\000\004\027\ufffd\001\002\000\004\010\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\010\020\001\002\000\004" +
    "\010\ufffc\001\002\000\004\026\022\001\002\000\004\002" +
    "\001\001\002\000\024\011\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\020\ufff4\021\ufff4\025\ufff4\026\ufff4\027\ufff4\001\002\000" +
    "\024\011\026\013\027\014\024\015\035\020\034\021\033" +
    "\025\031\026\032\027\030\001\002\000\006\016\047\017" +
    "\052\001\002\000\024\011\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\020\ufff5\021\ufff5\025\ufff5\026\ufff5\027\ufff5\001\002\000" +
    "\004\030\067\001\002\000\004\030\063\001\002\000\004" +
    "\002\ufff6\001\002\000\006\030\044\034\045\001\002\000" +
    "\024\011\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\001\002\000\004\035\041\001" +
    "\002\000\004\035\040\001\002\000\004\025\036\001\002" +
    "\000\004\035\037\001\002\000\026\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\020\uffec\021\uffec\025\uffec\026\uffec" +
    "\027\uffec\001\002\000\026\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\020\uffef\021\uffef\025\uffef\026\uffef\027\uffef" +
    "\001\002\000\026\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\020\uffee\021\uffee\025\uffee\026\uffee\027\uffee\001\002" +
    "\000\024\011\026\013\027\014\024\015\035\020\034\021" +
    "\033\025\031\026\032\027\043\001\002\000\026\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\021\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\001\002\000\014\016\uffe8\017\uffe8" +
    "\023\uffe8\024\uffe8\031\uffe8\001\002\000\026\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\025\uffed" +
    "\026\uffed\027\uffed\001\002\000\014\016\047\017\052\023" +
    "\051\024\053\031\050\001\002\000\020\016\uffe2\017\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\031\uffe2\035\uffe2\001\002\000" +
    "\004\035\062\001\002\000\012\016\047\017\052\023\051" +
    "\024\053\001\002\000\020\016\uffe1\017\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\031\uffe1\035\uffe1\001\002\000\016\016\uffe5" +
    "\017\uffe5\022\uffe5\023\uffe5\024\uffe5\031\uffe5\001\002\000" +
    "\016\016\uffe6\017\uffe6\022\uffe6\023\uffe6\024\uffe6\031\uffe6" +
    "\001\002\000\016\016\uffe7\017\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\031\uffe7\001\002\000\016\016\uffe9\017\uffe9\022\057" +
    "\023\uffe9\024\uffe9\031\uffe9\001\002\000\012\016\047\017" +
    "\052\023\051\024\053\001\002\000\016\016\uffe4\017\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\031\uffe4\001\002\000\016\016" +
    "\uffe3\017\uffe3\022\uffe3\023\uffe3\024\uffe3\031\uffe3\001\002" +
    "\000\026\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\020" +
    "\uffea\021\uffea\025\uffea\026\uffea\027\uffea\001\002\000\004" +
    "\024\064\001\002\000\004\031\065\001\002\000\004\035" +
    "\066\001\002\000\026\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\020\ufff1\021\ufff1\025\ufff1\026\ufff1\027\ufff1\001" +
    "\002\000\012\016\047\017\052\023\051\024\053\001\002" +
    "\000\004\022\057\001\002\000\006\022\uffe7\031\072\001" +
    "\002\000\022\011\026\013\027\014\024\015\035\020\034" +
    "\021\033\025\031\026\032\001\002\000\026\011\ufff3\012" +
    "\074\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\001\002\000\022\011\026\013\027\014" +
    "\024\015\035\020\034\021\033\025\031\026\032\001\002" +
    "\000\026\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020" +
    "\ufff2\021\ufff2\025\ufff2\026\ufff2\027\ufff2\001\002\000\004" +
    "\035\077\001\002\000\026\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\020\ufff0\021\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\002\004\003\003\001\001\000\004\005" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\016\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\022" +
    "\001\001\000\004\012\024\001\001\000\004\016\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\024\001\001\000\002\001\001" +
    "\000\004\013\045\001\001\000\002\001\001\000\010\014" +
    "\055\015\054\016\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\060\015\054\016\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\057\015\054\016" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\067\015\070\016\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\072\001\001\000\002\001\001\000\004\012\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
   public Program start() throws Exception {
      Symbol symbol = parse();
      return (Program)symbol.value;
   }
   
   public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
       report_fatal_error("Erro no token \"" + cur_token + "\"" 
       						+ " na linha " + ((Token)cur_token).getLine()
       						+ " na coluna " + ((Token)cur_token).getColumn() + ".", null);
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // directionExpression ::= RIGHT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directionExpression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // directionExpression ::= LEFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directionExpression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // symbolExpression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbolExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbolExpression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbolExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbolExpression ::= SYMBOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbolExpression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= directionExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= symbolExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressionList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressionList ::= expressionList expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command ::= IDENTIFIER LEFT_PAR expressionList RIGHT_PAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= LEFT_BRACE commandList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= GOTO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= IDENTIFIER COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= REJECT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= ACCEPT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= MOVE directionExpression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= WRITE LEFT_PAR SYMBOL_LITERAL RIGHT_PAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= IF LEFT_PAR symbolExpression RIGHT_PAR command ELSE command 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= IF LEFT_PAR symbolExpression RIGHT_PAR command 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // commandList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // commandList ::= commandList command 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commandList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mainRoutine ::= MAIN LEFT_BRACE commandList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainRoutine",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= DIRECTION_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= SYMBOL_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= CONDITION_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // routine ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("routine",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // subroutineList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subroutineList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // subroutineList ::= subroutineList routine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subroutineList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // symbolRange ::= SYMBOL_LITERAL DOT_DOT SYMBOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbolRange",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inputConfiguration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputConfiguration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inputConfiguration ::= INPUT_SET LEFT_BRACE symbolRange RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputConfiguration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= inputConfiguration subroutineList mainRoutine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

